<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dogtiger.challus.repository.UserMapper">
    <resultMap id="feedMap" type="com.dogtiger.challus.entity.Feed">
        <id property="feedId" column="feed_id" />
        <result property="challengeLayout" column="challenge_layout" />
        <result property="layout" column="layout" />
        <result property="userId" column="user_id" />
        <result property="challengeId" column="challenge_id" />
        <result property="categoryName" column="category_name" />
        <result property="feedContent" column="feed_content" />
        <result property="stopWatch" column="stopwatch" />
        <result property="img" column="img" />
        <result property="dateTime" column="datetime" />
        <result property="updatetime" column="updatetime" />
        <result property="challengeName" column="challenge_name" />
        <result property="nickname" column="nickname" />
        <result property="profileUrl" column="profile_url" />
        <result property="feedLike" column="feed_like" />
        <association property="user" resultMap="userMap" />
    </resultMap>

    <resultMap id="userMap" type="com.dogtiger.challus.entity.User">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="phone" column="phone" />
        <result property="nickname" column="nickname" />
        <result property="password" column="password" />
        <result property="point" column="point" />
        <result property="intro" column="intro" />
        <result property="membership" column="membership" />
        <result property="isAdmin" column="is_admin" />
        <result property="oauth2Id" column="oauth2_id" />
        <result property="profileUrl" column="profile_url" />
        <result property="enabled" column="enabled" />
        <result property="datetime" column="datetime" />
        <result property="isResign" column="is_resign" />
    </resultMap>

    <insert id="saveUser" parameterType="com.dogtiger.challus.entity.User">
        insert into user_tb
        values(
            0,
            #{email},
            #{name},
            #{phone},
            #{nickname},
            #{password},
            0,
            '',
            'Bronze',
            0,
            #{oauth2Id},
            <if test="profileUrl != null">
                #{profileUrl}
            </if>
            <if test="profileUrl == null">
                default
            </if>,
            0,
            now(),
            0
        );
    </insert>

    <insert id="saveIntro">
        insert into user_tb
        values(
            0,
            #{email},
            #{name},
            #{phone},
            #{nickname},
            #{password},
            #{point},
            #{intro},
            #{membership},
            #{isAdmin},
            #{oauth2Id},
            #{profileUrl},
            0,
            now(),
            0
        );
    </insert>

    <update id="updateIntro">
        update user_tb
        set
            intro = #{intro}
        where
            user_id = #{userId}
    </update>

    <update id="updateMypageDetail" parameterType="com.dogtiger.challus.entity.User">
        update user_tb
        set
            nickname = #{nickname},
            profile_url = #{profileUrl}
        where
            user_id = #{userId}
    </update>

    <delete id="deleteUser" statementType="CALLABLE">
        {call p_delete_user(#{userId})}
    </delete>

    <select id="findUserByEmail" resultMap="userMap">
        select
            user_id,
            email,
            name,
            phone,
            nickname,
            password,
            point,
            intro,
            membership,
            is_admin,
            oauth2_id,
            profile_url
        from
            user_tb
        where
            email = #{email}
    </select>

    <select id="findUserByOauth2Id" resultMap="userMap">
        select
            user_id,
            email,
            name,
            phone,
            nickname,
            password,
            point,
            intro,
            membership,
            is_admin,
            oauth2_id,
            profile_url
        from
            user_tb
        where
            oauth2_id = #{oauth2Id}
    </select>

    <select id="getIntro" resultType="java.lang.String">
        select
            intro
        from
            user_tb
        where
            nickname = #{nickname}
    </select>

    <select id="getMembersCount" resultType="java.util.Map">
        select
            date_format(datetime, '%Y-%m-%d') as date,
            count(*) as count
        from
            user_tb
        where
            is_admin = 0
        group by
            date_format(datetime, '%Y-%m-%d')
    </select>

    <select id="getUserIdAll" resultType="java.lang.Integer">
        select
            user_id
        from
            user_tb
    </select>

    <select id="getIsAdminUser" resultMap="userMap">
        select
            user_id,
            email,
            name,
            phone,
            nickname,
            point,
            intro,
            membership,
            is_admin,
            oauth2_id,
            profile_url
        from
            user_tb
        where
            is_admin = 1
    </select>

    <select id="getProgress" resultType="int">
        select
            count(distinct date(ft.datetime)) as count
        from
            challenge_tb ct
            left outer join feed_tb ft on(ft.challenge_id = ct.challenge_id)
            left outer join user_tb ut on(ut.user_id = ft.user_id)
        where
            ct.challenge_id = #{challengeId}
        and ut.user_id = #{userId};
    </select>

    <select id="getChallengeFeeds" resultType="com.dogtiger.challus.entity.Feed" resultMap="feedMap">
        select
            ft.feed_id,
            ft.user_id,
            ft.challenge_id,
            ft.category_name,
            ft.feed_content,
            ft.stopwatch,
            ft.img,
            ut.profile_url,
            ut.nickname,
            ft.datetime,
            ft.feed_like
        from
            feed_tb ft
            left outer join user_tb ut on(ut.user_id = ft.user_id)
        where
            ft.challenge_id = #{challengeId}
            and ut.user_id = #{userId}
        order by
            datetime desc;
    </select>

</mapper>