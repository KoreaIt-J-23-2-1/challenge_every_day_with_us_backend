<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dogtiger.challus.repository.ChallengeMapper">
    <resultMap id="challengeMap" type="com.dogtiger.challus.entity.Challenge">
        <id property="challengeId" column="challenge_id" />
        <result property="userId" column="user_id" />
        <result property="challengeLayout" column="challenge_layout" />
        <result property="challengeName" column="challenge_name" />
        <result property="introduction" column="challenge_introduction" />
        <result property="isApplicable" column="is_applicable" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="categoryName" column="category_name" />
        <result property="challengeLikeCount" column="challenge_like_count" />
        <result property="challengeLayout" column="challenge_layout" />
        <result property="challengeLayout" column="challenge_layout" />
        <result property="name" column="name" />
        <result property="nickname" column="nickname" />
        <result property="name" column="name" />
        <result property="challenger" column="challenger" />
        <result property="isDeadline" column="is_deadline" />
        <result property="isHidden" column="is_hidden" />
        <association property="challengeApplication" resultMap="challengeApplicationMap" />
    </resultMap>

    <resultMap id="challengeApplicationMap" type="com.dogtiger.challus.entity.ChallengeApplication">
        <id property="challengeApplicationId" column="challenge_application_id" />
        <result property="challengeId" column="challenge_id" />
        <result property="userId" column="user_id" />
        <result property="acceptState" column="accept_state" />
        <association property="user" resultMap="userMap" />
    </resultMap>

    <resultMap id="userMap" type="com.dogtiger.challus.entity.User">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="phone" column="phone" />
        <result property="nickname" column="nickname" />
        <result property="password" column="password" />
        <result property="point" column="point" />
        <result property="intro" column="intro" />
        <result property="membership" column="membership" />
        <result property="isAdmin" column="is_admin" />
        <result property="oauth2Id" column="oauth2_id" />
        <result property="profileUrl" column="profile_url" />
        <result property="enabled" column="enabled" />
    </resultMap>

    <insert id="saveChallenge" parameterType="com.dogtiger.challus.entity.Challenge">
        insert into challenge_tb
        values (
        0, #{userId}, #{challengeName}, #{challengeLayout}, #{introduction},
        <choose>
            <when test="isApplicable.equals('true')">
                0
            </when>
            <otherwise>
                1
            </otherwise>
        </choose>,
        #{startDate}, #{endDate}, #{categoryName}, 0, 0, 0, 1
        )
    </insert>

    <insert id="challengeApplicable" statementType="CALLABLE">
        {call p_insert_challenge_application(#{challengeId}, #{userId})}
    </insert>

    <insert id="saveFeedPoint" statementType="CALLABLE">
        {call p_insert_point(#{challengeUserId}, #{userId})}
    </insert>

    <insert id="processDeadLine" statementType="CALLABLE">
        {call p_process_deadline()}
    </insert>

    <select id="getChallengeByChallengeId" resultMap="challengeMap">
        select
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ut.name,
            ut.nickname,
            ct.challenge_like_count,
            ct.challenge_layout,
            ct.challenger,
            ct.is_deadline,
            ct.is_hidden
        from
            challenge_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
        where
            ct.challenge_id = #{challengeId}
    </select>

    <select id="getChallengeList" resultMap="challengeMap" parameterType="hashmap">
        select
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ut.name,
            ct.challenge_like_count,
            ct.challenge_layout,
            ct.challenger,
            ct.is_deadline,
            ct.is_hidden
        from
            challenge_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
        where
        1 = 1
            <choose>
                <when test="sort.equals('hidden')">
                    and ct.is_hidden = 1
                </when>
                <when test="sort.equals('stop')">
                    and ct.is_deadline = 1
                </when>
                <otherwise>
                    and (ct.is_hidden = 0
                    and ct.is_deadline = 0)
                </otherwise>
            </choose>
            <choose>
                <when test="optionName.equals('전체')">
                    and (ct.challenge_name like concat("%", #{searchValue}, "%")
                    or ct.category_name like concat("%", #{searchValue}, "%"))
                </when>
                <when test="optionName.equals('챌린지제목')">
                    and ct.challenge_name like concat("%", #{searchValue}, "%")
                </when>
                <when test="optionName.equals('카테고리이름')">
                    and ct.category_name like concat("%", #{searchValue}, "%")
                </when>
            </choose>
        order by
            <choose>
                <when test="sort.equals('latest')">
                    ct.start_date desc
                </when>
                <when test="sort.equals('oldest')">
                    ct.start_date asc
                </when>
                <when test="sort.equals('popular')">
                    ct.challenge_like_count desc
                </when>
                <when test="sort.equals('participants')">
                    ct.challenger desc
                </when>
                <otherwise>
                    ct.start_date desc
                </otherwise>
            </choose>
        limit #{index}, 30
    </select>

    <select id="getPopularChallenge" resultMap="challengeMap">
        SELECT
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ut.name,
            ct.challenge_like_count,
            ct.challenge_layout,
            ct.challenger,
            ct.is_deadline,
            ct.is_hidden
        FROM
            challenge_tb ct
            LEFT OUTER JOIN user_tb ut ON (ut.user_id = ct.user_id)
        WHERE
            1 = 1
            AND (
                (ct.is_hidden = 0 AND ct.is_deadline = 0)
            )
        AND (
        (
            #{year} IS NULL
            )
            OR (
                #{year} IS NOT NULL
                AND #{month} IS NULL
                AND #{date} IS NULL
                AND ct.start_date = (
                    SELECT start_date
                    FROM challenge_tb
                    WHERE YEAR(start_date) = #{year}
                    ORDER BY challenge_like_count DESC, start_date DESC
                    LIMIT 1
                )
            )
            OR (
                #{year} IS NOT NULL
                AND #{month} IS NOT NULL
                AND #{date} IS NULL
                AND ct.start_date = (
                    SELECT start_date
                    FROM challenge_tb
                    WHERE YEAR(start_date) = #{year}
                    AND MONTH(start_date) = #{month}
                    ORDER BY challenge_like_count DESC, start_date DESC
                    LIMIT 1
                )
            )
            OR (
                #{year} IS NOT NULL
                AND #{month} IS NOT NULL
                AND #{date} IS NOT NULL
                AND ct.start_date = (
                    SELECT start_date
                    FROM challenge_tb
                    WHERE YEAR(start_date) = #{year}
                    AND MONTH(start_date) = #{month}
                    AND DAY(start_date) = #{date}
                    ORDER BY challenge_like_count DESC, start_date DESC
                    LIMIT 1
                )
            )
        )
        ORDER BY
            ct.challenge_like_count DESC,
            ct.start_date DESC
        LIMIT 1;
    </select>

    <select id="getChallengeCount" resultType="java.lang.Integer">
        select
            count(*)
        from
            challenge_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
        where
            1 = 1
            <choose>
                <when test="optionName.equals('전체')">
                    and ct.challenge_name like concat("%", #{searchValue}, "%")
                    or ct.category_name like concat("%", #{searchValue}, "%")
                </when>
                <when test="optionName.equals('챌린지제목')">
                    and ct.challenge_name like concat("%", #{searchValue}, "%")
                </when>
                <when test="optionName.equals('카테고리이름')">
                    and ct.category_name like concat("%", #{searchValue}, "%")
                </when>
            </choose>
    </select>

    <select id="getLikeState" resultType="java.lang.Integer">
        select
            count(*)
        from
            challenge_like_tb
        where
            challenge_id = #{challengeId}
    </select>

    <select id="getUserLikeState" parameterType="com.dogtiger.challus.entity.Challenge" resultType="integer">
        select
            count(*)
        from
            challenge_like_tb
        where
            challenge_id = #{challengeId}
        and user_id = #{userId}
    </select>

    <select id="getChallengeStatus" resultType="java.lang.Integer">
        select
            count(*)
        from
            challenge_application_tb
        where
            challenge_id = #{challengeId}
        and user_id = #{userId}
        and accept_state = 1
    </select>

    <select id="getChallengeAtmospher" resultType="java.lang.Integer">
        select
            count(*)
        from
            challenge_application_tb
        where
            challenge_id = #{challengeId}
        and user_id = #{userId}
        and accept_state = 0
    </select>

    <select id="getChallengeRejected" resultType="java.lang.Integer">
        select
        count(*)
        from
        challenge_application_tb
        where
        challenge_id = #{challengeId}
        and user_id = #{userId}
        and accept_state = 2
    </select>

    <select id="getChallengersByChallengeId" resultMap="challengeApplicationMap">
        select distinct
            cat.user_id,
            ut.nickname,
            ut.profile_url
        from
            challenge_application_tb cat
            left outer join user_tb ut on(ut.user_id = cat.user_id)
        where
            cat.accept_state = 1
            and cat.challenge_id = #{challengeId}
    </select>

    <update id="insertLike" parameterType="com.dogtiger.challus.entity.Challenge">
        insert into challenge_like_tb
        values(0, #{challengeId}, #{userId})
    </update>

    <update id="challengeApproval">
        update challenge_application_tb
        set
            accept_state = 1
        where
            user_id = #{userId}
        and challenge_id = #{challengeId}
    </update>

    <update id="challengeRefusal">
        update challenge_application_tb
        set
            accept_state = 2
        where
            user_id = #{userId}
        and challenge_id = #{challengeId}
    </update>

    <update id="challengeStop">
        update challenge_tb
        set
            is_deadline = 1,
            end_date = now()
        where
            challenge_id = #{challengeId}
    </update>

    <update id="challengeHidden" statementType="CALLABLE">
        {call p_update_and_delete_challenge_data(#{challengeId})}
    </update>

    <delete id="cancelLike" parameterType="com.dogtiger.challus.entity.Challenge">
        delete
        from
            challenge_like_tb
        where
            challenge_id = #{challengeId}
        and user_id = #{userId}
    </delete>

    <delete id="challengeDelete">
        delete
        from
            challenge_tb
        where
            challenge_id = #{challengeId}
    </delete>

    <delete id="deleteChallenger">
        delete
        from
            challenge_application_tb
        where
            user_id = #{userId}
        and challenge_id = #{challengeId}
    </delete>

    <select id="getApprovedChallengesByUserId" resultMap="challengeMap">
        select
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ct.challenge_like_count,
            ct.is_deadline,
            ct.is_hidden
        from
            challenge_tb ct
            left outer join challenge_application_tb cat on(cat.challenge_id = ct.challenge_id)
        where
            cat.accept_state = 1
        and cat.user_id = #{userId}
        and ct.is_deadline = 0
        and ct.is_hidden = 0;
    </select>

    <select id="findReceiverUserId" resultType="int">
        select
            user_id
        from
            challenge_tb
        where
            challenge_id = #{challengeId}
    </select>

    <select id="getChallenges" resultMap="challengeMap" parameterType="hashmap">
        select
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ut.name,
            ct.challenge_like_count,
            ct.challenge_layout,
            ct.is_deadline,
            ct.is_hidden
        from
            challenge_tb ct
            left outer join user_tb ut on(ut.user_id = ct.user_id)
    </select>

    <select id="getAdminChallengersCount" resultType="java.util.Map">
        select
            date_format(start_date, '%Y-%m-%d') as date,
            count(*) as count
        from
            challenge_tb
        where
            is_deadline = 0
            and is_hidden = 0
        group by
            date_format(start_date, '%Y-%m-%d')
        order by
            date asc;
    </select>

    <select id="getChallengeCompletedCount" resultType="java.util.Map">
        select
            date_format(end_date, '%Y-%m-%d') as date,
            count(*) as count
        from
            challenge_tb
        where
            is_deadline = 1
        group by
            date_format(end_date, '%Y-%m-%d')
    </select>

    <select id="getChallengeDeletedCount" resultType="java.util.Map">
        select
            date_format(end_date, '%Y-%m-%d') as date,
            count(*) as count
        from
            challenge_tb
        where
            is_hidden = 1
        group by
            date_format(end_date, '%Y-%m-%d')
    </select>

    <select id="getChallengeProgress" resultType="int">
        select
            count(distinct date(ft.datetime)) as count
        from
            challenge_tb ct
            left outer join feed_tb ft on(ft.challenge_id = ct.challenge_id)
        where
            ct.challenge_id = #{challengeId};
    </select>

    <select id="getApprovedEndChallengesByUserId" resultMap="challengeMap">
        select
            ct.challenge_id,
            ct.user_id,
            ct.challenge_name,
            ct.challenge_introduction,
            ct.is_applicable,
            ct.start_date,
            ct.end_date,
            ct.category_name,
            ct.challenge_like_count,
            ct.is_hidden,
            ct.is_deadline
        from
            challenge_tb ct
            left outer join challenge_application_tb cat on(cat.challenge_id = ct.challenge_id)
        where
            cat.accept_state = 1
            and cat.user_id = #{userId}
            and ct.is_deadline = 1;
    </select>
</mapper>